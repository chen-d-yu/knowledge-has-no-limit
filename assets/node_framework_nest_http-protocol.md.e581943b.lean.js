import{_ as a,a as n,b as l,c as o,d as p,e}from"./chunks/20230731001012.a14ea1b6.js";import{_ as t,o as c,c as r,L as i}from"./chunks/framework.a932675b.js";const y="/knowledge-has-no-limit/assets/image-20240106160335821.bdaba7df.png",h=JSON.parse('{"title":"http协议","description":"","frontmatter":{"outline":[1,3],"typora-copy-images-to":"./assets"},"headers":[],"relativePath":"node/framework/nest/http-protocol.md","lastUpdated":1725964165000}'),d={name:"node/framework/nest/http-protocol.md"};function D(F,s,B,u,A,b){return c(),r("div",null,s[0]||(s[0]=[i('<h1 id="http协议" tabindex="-1"><code>http</code>协议 <a class="header-anchor" href="#http协议" aria-label="Permalink to &quot;`http`协议&quot;">​</a></h1><p><code>HTTP</code> 协议是 <code>Hyper Text Transfer Protocol（超文本传输协议）</code>的缩写，是用于从<code>万维网（ WWW:World Wide Web ）</code> 服务器传输超文本到本地浏览器的传送协议。</p><p><code>HTTP</code> 是一个客户端和服务端请求和应答的标准协议，规定了传输报文的指定格式的一种规范协议。</p><p><code>请求和应答（request、response）</code> ，指的是客户端发送<code>HTTP</code>请求，服务端响应此次的请求，此时就完成了一次<code>HTTP</code> 请求。</p><p>符合了 <code>HTTP</code> 协议的规范传输报文，就是 <code>HTTP</code> 协议。</p><h2 id="报文" tabindex="-1">报文 <a class="header-anchor" href="#报文" aria-label="Permalink to &quot;报文&quot;">​</a></h2><p>一个完整的 <code>HTTP</code> 协议的报文主要有一下三部分组成：</p><ul><li>起始行：描述请求/响应的基本信息。</li><li>首部字段：使用键值对的形式更加详细的说明报文。</li><li>消息正文：实际传输的数据，可以是文本、文件、音频、视频等数据，比如前端传输的表单，后端响应的 <code>JSON</code> 数据。</li></ul><p>请求报文格式如下：</p><p><img src="'+a+'" alt="image-20210922135409188"></p><p>响应报文格式如下：</p><p><img src="'+n+`" alt="image-20210922135409188"></p><h3 id="请求方法" tabindex="-1">请求方法 <a class="header-anchor" href="#请求方法" aria-label="Permalink to &quot;请求方法&quot;">​</a></h3><p><code>HTTP/1.1</code> 协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源。</p><p>下面常见的符合 <code>RESTFul</code> 风格的请求方法：</p><ul><li><strong>GET：</strong> 从服务器获取资源</li><li><strong>POST：</strong> 在服务器上创建一个新的资源，常用于表单提交，创建数据</li><li><strong>PUT：</strong> 更新服务器上的资源，返回整个更新后的资源</li><li><strong>DELETE：</strong> 删除服务器上的资源</li></ul><h3 id="响应码" tabindex="-1">响应码 <a class="header-anchor" href="#响应码" aria-label="Permalink to &quot;响应码&quot;">​</a></h3><p>下面是常见的 <code>HTTP</code> 响应码：</p><ul><li>1xx 消息——请求已被服务器接收，继续处理</li><li>2xx 成功——请求已成功被服务器接收、理解、并接受</li><li>3xx 重定向——需要后续操作才能完成这一请求</li><li>4xx 请求错误——请求含有词法错误或者无法被执行，客户端</li><li>5xx 服务器错误——服务器在处理某个正确请求时发生错误，500</li></ul><table><thead><tr><th>200</th><th>OK</th><th>从客户端发送的请求，服务端已经正常处理了。</th></tr></thead><tbody><tr><td>204</td><td>No Content</td><td>服务端已经正常处理了,但是响应中没有实体，也不允许有实体。</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久性，重定向。表示请求的资源已经拥有了新的 uri，需要重新访问。</td></tr><tr><td>302</td><td>Moved Temporarily</td><td>临时重定向。</td></tr><tr><td>400</td><td>Bad Request</td><td>请求报文中存在语法错去。</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求需要有通过 HTTP 请求的认证信息。</td></tr><tr><td>403</td><td>Forbidden</td><td>请求被阻止，可能因为某些权限问题，比如访问的文件没有权限等。</td></tr><tr><td>404</td><td>Not Found</td><td>表示在服务器上没有你要找的资源</td></tr><tr><td>500</td><td>Internal server Error</td><td>服务器执行程序出现异常</td></tr></tbody></table><h3 id="首部字段" tabindex="-1">首部字段 <a class="header-anchor" href="#首部字段" aria-label="Permalink to &quot;首部字段&quot;">​</a></h3><p>首部字段是构成 http 报文的重要元素，它能起到传递额外重要信息的作用，首部信息一般会提供报文类型、编码和大小、认证信息，缓存策略等信息。</p><p>记住常用的几个即可请求：</p><ul><li>Content-Type：请求体是什么编码格式</li><li>Content-Length：请求体体积大小</li><li>Keep-Alive：保持 tcp 时长</li><li>Accept-Encoding：客户端支持的文件压缩格式</li><li>Accept：支持返回的文件格式</li><li>User-Agent：代理客户端的信息，也就是浏览器的信息响应：</li><li>Content-Type：响应体的数据类型</li><li>Access-Control-Allow-Origin：是否允许跨域</li><li>Keep-Alive：保持 tcp 连接的时长</li></ul><h2 id="数据传输" tabindex="-1">数据传输 <a class="header-anchor" href="#数据传输" aria-label="Permalink to &quot;数据传输&quot;">​</a></h2><p>客户端和服务端通过 <code>HTTP</code> 通信，客户端发送数据给服务端时，按照数据位置的不同分为两种：</p><ul><li><code>URI</code> 请求：参数由 <code>URL</code> 路径携带传输，分为查询参数（query）和路径参数（param）</li><li><code>body</code> 请求体：参数由 <code>body</code> 请求体携带，有多种不同的数据格式，格式由报文的字段 <code>Content-Type</code> 决定数据的格式 <ul><li><code>form-data</code>：<code>Content-Type:multipart/form-data</code>，由 <code>body</code> 请求体携带传输，服务端使用 <code>body</code> 去获取。</li><li><code>x-www-form-urlencoded</code>：<code>Content-Type:application/x-www-form-urlencoded</code>，由 <code>body</code> 请求体携带传输，所有的方法都能获取。</li><li><code>json</code>：<code>Content-Type:application/json</code> ，传输标准的 <code>JSON</code> 格式数据，由 <code>body</code> 请求体携带，所有的方法都能获取。</li></ul></li></ul><p>有的开发人员通过请求方式去区分，<code>Get</code> 请求不能接收 <code>body</code> 请求体参数，这种区分显然是不准确的，因为 <code>Get</code> 请求也是有请求体的。</p><p>但是在开发过程中，不建议使用 <code>Get</code> 请求去接收请求体参数，因为很多框架在传参时，会特意忽略这一部分的内容，比如在前端的请求库 <code>axios</code> 就会丢弃 <code>Get</code> 请求的 <code>body</code> 参数，所以尽量不要在 <code>Get</code> 请求中发送 <code>body</code> 参数。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在前端的请求库 <code>axios</code> 中，如果使用 <code>Get</code> 请求，但是把参数放在了请求体中，<code>axios</code> 并不会把参数放入其中。</p></div><div class="tip custom-block"><p class="custom-block-title">案例演示</p><p>以下案例使用<code>express</code>演示</p></div><h3 id="query" tabindex="-1">query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;query&quot;">​</a></h3><p>键值对形式的数据，多个键值对以 <code>&amp;</code> 分隔，填充在 <code>URL</code> 路径的后面<code>URL?key1=val&amp;key2=val</code>。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/query</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">query</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">query</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+l+`" alt=""></p><h3 id="param" tabindex="-1">param <a class="header-anchor" href="#param" aria-label="Permalink to &quot;param&quot;">​</a></h3><p>动态参数，通过 <code>/:param</code> 声明，填充在 <code>URL</code> 的后面<code>URL/:id</code>。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/param/:id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">params</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+y+`" alt="image-20240106160335821"></p><h3 id="body-form-urlencoded" tabindex="-1">body: form-urlencoded <a class="header-anchor" href="#body-form-urlencoded" aria-label="Permalink to &quot;body: form-urlencoded&quot;">​</a></h3><p>键和值编码为键值元组，以 <code>&#39;&amp;&#39;</code> 分隔</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/urlencoded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/urlencoded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="`+o+`" alt=""></p><h3 id="body-json" tabindex="-1">body: json <a class="header-anchor" href="#body-json" aria-label="Permalink to &quot;body: json&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+p+`" alt=""></p><h3 id="body-form-data" tabindex="-1">body: form-data <a class="header-anchor" href="#body-form-data" aria-label="Permalink to &quot;body: form-data&quot;">​</a></h3><p>这个类型的参数，一般是用于文件传输。在 <code>express</code> 需要开启 <code>form-data</code> 解析的插件，才能读取到参数。</p><p>开启插件解析，<code>upload</code> 作为保存下载文件的中间件方法。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> express </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bodyParser </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">body-parser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> multer </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">multer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> upload </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">multer</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">dest</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uploadFiles/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">express</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 读取json配置</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(bodyParser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">limit</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1mb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#BABED8;">  bodyParser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">urlencoded</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">extended</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3500</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">服务启动端口3500</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>接收参数</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/form-data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> upload</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">single</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cover</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// req.file 记录了文件上传的信息</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// req.body 记录了其它普通参数（非文件）的信息</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">file</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+e+'" alt=""></p><h2 id="restful-接口规范" tabindex="-1">RESTFul 接口规范 <a class="header-anchor" href="#restful-接口规范" aria-label="Permalink to &quot;RESTFul 接口规范&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">RESTFul</p><p>全称：Representational State Transfer =&gt; REST</p><p>直译为：资源表示层状态转移</p></div><p><code>REST</code> 是 <code>web</code> 服务的一种架构风格，一种设计风格，而不是一种技术手段，<span class="high-light">写代码，通常规范大于约束。</span></p><p>只要符合以下这些特点，就可以被称为 <code>RESTFul</code> 风格<code>api</code>。</p><ol><li><p>版本号</p><p>在请求路径上表明请求资源的版本，能有效解决因为升级系统接口不兼容的问题，通常会在 <code>URL</code> 中保留旧版本，同时兼容新的版本</p><p>比如：<code>【GET】/v1/user</code>、<code>【GET】/v2/user</code></p></li><li><p>资源路径</p><p>请求路径会被视为服务器的一种资源，在请求路径 <code>URL</code> 中，规定只能包含名词，通过请求方式区分请求的动作，多个单词的情况下，需要使用下划线 <code>_</code> 划分。</p><p>比如：<code>【POST】/v1/user</code> 新增用户</p></li><li><p>请求方式</p><p>通过请求方式区分此次请求的动机，动作可以划分为四个大类 <code>C R U D</code>，对应 <code>增查改查</code></p></li></ol><ul><li>【GET】：从服务器上获取资源</li><li>【POST】：在服务器创建新的资源</li><li>【PUT】：修改服务器上的资源，并返回整个修改后的资源</li><li>【DELETE】：删除服务器上的资源</li></ul><ol start="4"><li><p>查询参数</p><p>接口应该要接收参数，过滤返回的结果</p><p>比如分页：<code>【GET】/v1/api/user?page={num}&amp;size={num}</code></p></li><li><p>状态码</p><p>使用合适的状态码，常规的业务错误（表单校验不过）不应该直接抛错返回客户端，应该在接口结果中，返回状态码 200，并且返回描述的错误类型，返回业务状态码。如果非业务错误，可直接响应错误给客户端。</p><p>常见非业务错误状态码：</p></li></ol><ul><li>200，正常返回</li><li>204，已接收处理，但无实体返回</li><li>401，未登录用户</li><li>403，未授权的资源</li><li>404，找不到资源路径</li><li>500，服务器代码异常</li><li>503，服务器错误</li></ul><ol start="6"><li><p>响应规范</p><p>接口应返回封装统一的 <code>JSON</code>格式的响应体，成功返回正常数据，失败根据是否为业务错误返回状态码、错误信息、错误标识等</p><p>比如：</p><p>成功返回：<code>{code: xxx}</code></p><p>业务错误：<code>{message:&#39;xxxxx&#39;,failed:true}</code></p><p>非业务错误：<code>{statusCode:404,message:&#39;Not Found&#39;}</code></p></li></ol>',62)]))}const g=t(d,[["render",D]]);export{h as __pageData,g as default};
