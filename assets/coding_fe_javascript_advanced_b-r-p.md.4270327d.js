import{_ as n,o as a,c as l,L as o}from"./chunks/framework.a932675b.js";const e="/knowledge-has-no-limit/assets/QQ录屏20230512235825.d685a35c.gif",p="/knowledge-has-no-limit/assets/20230513_002654.5960ed0d.gif",c="/knowledge-has-no-limit/assets/20230513145843.1ceb07b7.png",t="/knowledge-has-no-limit/assets/20230513150846.3790ddd2.png",r="/knowledge-has-no-limit/assets/20230513151835.ef1d03dc.png",i="/knowledge-has-no-limit/assets/20230513152713.4d760348.png",D="/knowledge-has-no-limit/assets/20230513152753.846cfba7.png",A=JSON.parse('{"title":"浏览器渲染原理","description":"","frontmatter":{"name":"浏览器渲染原理"},"headers":[],"relativePath":"coding/fe/javascript/advanced/b-r-p.md","lastUpdated":1725964165000}'),d={name:"coding/fe/javascript/advanced/b-r-p.md"};function y(F,s,b,B,u,m){return a(),l("div",null,s[0]||(s[0]=[o(`<h1 id="浏览器渲染原理" tabindex="-1">浏览器渲染原理 <a class="header-anchor" href="#浏览器渲染原理" aria-label="Permalink to &quot;浏览器渲染原理&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在前端的面试中，有一道经典的八股文问题，当我们在地址栏输入 URL 后，这个过程会发生什么？这篇文章就来了解一下这一小小的问题背后所发生的事情。</p><p>关于这个问题，一个最极简的回答是：</p><blockquote><p>当我们从一个特定的网站请求网页时，浏览器从网络服务器获取特定的资源，然后在我们的客户端上显式该网页。</p></blockquote><p>实际上，当用户在地址栏内输入<code>URL</code>按下回车后，浏览器大致会发生以下步骤：</p><p><code>导航 -&gt; 请求 -&gt; 响应 -&gt; 解析渲染</code></p><h2 id="导航" tabindex="-1">导航 <a class="header-anchor" href="#导航" aria-label="Permalink to &quot;导航&quot;">​</a></h2><p>导航是网页加载的第一步，当用户在地址栏输入内容并按下回车后</p><ol><li>浏览器会判断输入的是<code>url</code>还是搜索关键字 <ul><li>关键字，会调用浏览器的默认搜索引擎，并跳转搜索</li><li><code>url</code>，则会进入下一阶段，判断缓存</li></ul></li><li>接下来浏览器会判断输入的网址是否有缓存 <ul><li>有，返回缓存的资源</li><li>无，进入下一阶段<code>DNS域名解析</code></li></ul></li><li><code>DNS域名解析</code>，获取输入的<code>URL</code>对应的网络服务器 IP 地址</li></ol><p><strong>优化手段：</strong></p><ol><li>DNS 缓存</li></ol><h2 id="请求阶段" tabindex="-1">请求阶段 <a class="header-anchor" href="#请求阶段" aria-label="Permalink to &quot;请求阶段&quot;">​</a></h2><p>一旦浏览器知道了服务器的<code>IP</code>地址，以<code>http</code>协议为例，浏览器会尝试通过 TCP 的三次握手四次挥手，与目标服务器进行链接</p><p><img src="https://minio.sciento.cn/st-public/2/6adf9a311054477da7665e1da2ed83a7@%E8%AF%B7%E6%B1%82.png" alt="http请求"></p><ol><li>与目标服务器建立 TCP 链接</li><li>构建请求头、请求体、cookie</li><li>发送<code>http</code>请求</li></ol><p><strong>优化手段：</strong></p><ol><li>发送请求会影响耗时，当请求多了，耗时也就高了，适当减少 http 请求，能合并请求就合并</li></ol><h2 id="响应阶段" tabindex="-1">响应阶段 <a class="header-anchor" href="#响应阶段" aria-label="Permalink to &quot;响应阶段&quot;">​</a></h2><p>服务器收到请求后，它会对这个请求进行处理，并回复一个响应信息，此时来到了响应阶段</p><p><img src="https://minio.sciento.cn/st-public/2/9bc7a70192db4f3fb25d57a16aa249e7@%E5%93%8D%E5%BA%94.png" alt="http响应"></p><ol><li>获取响应体</li><li>检查是否存在强缓存、协商缓存 <ul><li>存在缓存，直接使用缓存，进入到渲染阶段</li><li>不存在缓存，会下载资源</li></ul></li><li>断开链接，避免客户端、服务器两端的资源占用与损耗，当双方没有发生请求或者响应时，任意一方都可以关闭请求，断开链接</li></ol><p><strong>优化手段：</strong></p><ol><li>检查响应头，建议开启缓存（强缓存、协商缓存）</li><li>尽量不要给<code>HTML</code>资源添加缓存，避免更新不成功，因为打包工具会给我们的<code>JS|CSS</code>资源添加上哈希值在本地开启缓存，如果<code>HTML</code>资源也缓存了，就没办法识别到打包工具的缓存，就会造成页面更新不成功</li></ol><h2 id="解析渲染阶段" tabindex="-1">解析渲染阶段 <a class="header-anchor" href="#解析渲染阶段" aria-label="Permalink to &quot;解析渲染阶段&quot;">​</a></h2><p>到了最重要的阶段，浏览器拿到响应的数据后，会在浏览器内部开辟一块栈内存，给代码执行提供环境，换句话说，浏览器拿到数据后，会开启一个渲染进程去解析、渲染、执行代码、展示等操作，同时在渲染进程内分配一个<code>JS引擎线程</code>用于解析（<code>将JS代码组成AST抽象语法树</code>）、执行<code>JS代码</code>，<span style="background:#786512;color:#fff;">这就是 JavaScript 为什么是单线程的原因，因为浏览器只会在一个进程内分配一个主线程去解析执行 JS 代码</span></p><p>渲染进程自上而下扫描资源（<span style="background:#786512;color:#fff;">代码</span>），并逐行入栈执行，执行完成出栈</p><p>在扫描过程中，遇到这些标签<code>video|img|&lt;link href=&quot;...&quot; /&gt;|script</code>，会将它们移交新的线程去加载资源，这个线程就是<code>Task Queue</code>任务队列，主线程继续往下执行</p><h3 id="渲染流程" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程" aria-label="Permalink to &quot;渲染流程&quot;">​</a></h3><p>一个完整的渲染流程如下</p><ul><li>渲染进程解析<code>HTML</code>生成<code>DOM Tree</code></li><li>解析<code>CSS</code>生成<code>CSSOM Tree</code></li><li>将<code>DOM Tree</code>和<code>CSSOM Tree</code>结合起来生成<code>Render Tree</code>，执行布局过程，获得每个节点在屏幕上的确切坐标（<span style="background:#786512;color:#fff;">回流阶段</span>）</li><li>浏览器根据渲染树和回流阶段获取到的信息，得到节点在屏幕上的绝对像素，然后进行绘制</li></ul><p>注意，以上四个步骤，并不是严格按照顺序执行的，渲染进程会以最快的速度展示内容，也就是说，渲染进程一边解析<code>HTML</code>，一边构建渲染树。</p><p><img src="https://minio.sciento.cn/st-public/2/6afae24d080a4b21b26ef1b1e3dc1071@image20230512173035.png" alt="渲染流程"></p><h4 id="css阻塞" tabindex="-1"><code>CSS</code>阻塞 <a class="header-anchor" href="#css阻塞" aria-label="Permalink to &quot;\`CSS\`阻塞&quot;">​</a></h4><p><code>CSS</code>资源的加载是在任务队列进程中完成的，加上<code>HTML</code>解析和<code>CSS</code>解析时由两个并行的进程去完成的，所以<code>CSS</code>不会阻塞<code>DOM</code>树的解析</p><p>但是<code>Render Tree</code>是依赖<code>DOM Tree</code>和<code>CSSOM Tree</code>的，所以它必须等到两颗树的解析完成，才能进行合成，因此<code>CSS</code>的解析不会阻塞<code>DOM Tree</code>生成但会阻塞<code>Render Tree</code>的合成。同时，<code>CSSOM Tree</code>也会阻塞<code>JS</code>脚本的执行时间，因为<code>JS</code>代码可能会修改<code>CSS</code>样式，也就是对<code>CSSOM</code>进行修改，而解析加载不完整的<code>CSSOM Tree</code>是无法使用的，所以会在这颗树解析完成后，才会继续执行脚本的解析、执行等操作</p><p>浏览器的第一次渲染时间节点，是发生在<code>&lt;head&gt;</code>标签加载完成之后，在这个标签内如果在<code>CSS</code>样式代码后面还存在着<code>JS</code>同步代码，那么浏览器会阻塞<code>JS</code>脚本的运行和<code>DOM</code>构建，直到完成<code>CSSOM Tree</code>的下载和构建，在这种情况下。也就是对于现在的<code>SPA单页面应用</code>来说，会首页白屏一段时间</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">p</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./static/style.css?sleep=3000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./static/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">hello world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="`+e+`" alt=""></p><p>可见<code>CSS</code>资源延迟 3 秒执行，<code>JS</code>脚本也被延迟执行了</p><p>在解析<code>CSS</code>代码时，得出的结论：</p><ol><li>构建<code>CSSOM Tree</code>不会阻塞<code>DOM Tree</code>的构建，因为这两颗树的构建是在不同的线程中完成的</li><li>构建解析<code>CSS</code>是会阻塞<code>DOM</code>的渲染，因为<code>Render Tree</code>是依赖于<code>CSSOM Tree</code>和<code>DOM Tree</code>进行合成的</li><li>构建解析<code>CSS</code>是会阻塞后续<code>JS</code>脚本的解析执行，因为在<code>JS</code>代码中可能会存在对<code>CSS</code>样式进行修改的代码，也就是对<code>CSSOM Tree</code>的修改，如果<code>CSSOM Tree</code>不完整，是无法使用的，所以会优先渲染完成<code>CSSOM Tree</code>再去执行<code>JS</code>脚本</li></ol><p><strong>优化手段：</strong></p><ol><li>尽量避免在<code>&lt;head&gt;</code>标签内的<code>CSS</code>资源后面，存在<code>JS</code>脚本资源，因为<code>CSS</code>资源的加载构建会阻塞<code>JS</code>脚本的解析执行</li><li>尽可能减少回流和重绘，这两个操作都会延迟<code>CSSOM Tree</code>的构建，尽量做到样式集中修改（浏览器策略，当发现是集中修改，会收集当前次修改样式的操作，统一修改，节省流程）</li><li>图片、视频资源尽可能懒加载，图片、视频进入可视范围内再加载，因为它们都需要开辟新线程去加载，通过懒加载的形式，很大程度减少性能问题</li><li>音视频尽量走文件流加载，因为 mp3、4 这类文件资源加载回来是非常久的，会造成很长时间的白屏，通过文件流加载，等到合适的时机，再去加载下一段文件流</li></ol><h4 id="js阻塞" tabindex="-1"><code>JS</code>阻塞 <a class="header-anchor" href="#js阻塞" aria-label="Permalink to &quot;\`JS\`阻塞&quot;">​</a></h4><p>在浏览器解析代码时，如果遇见了<code>JS</code>脚本，渲染进程会暂停<code>DOM Tree</code>、<code>CSSOM Tree</code>的构建与渲染，转而去解析、执行<code>JS</code>脚本，这是因为在<code>JS</code>脚本中可能会存在修改了<code>CSS</code>属性或修改<code>DOM</code>元素的代码存在，所以会先暂停这两颗树的解析渲染，<span style="background:#786512;color:#fff;">这就是 JS 脚本为什么会阻塞页面渲染的原因</span>。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zh-CN</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">p</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(p)</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100000000</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">hello world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><img src="`+p+`" alt=""></p><p>浏览器访问页面，初始时为空白且控制台打印<code>null</code>，这是因为<code>JS</code>代码的大量<code>for</code>耗时循环阻塞了<code>DOM</code>渲染，此时<code>DOM</code>还未渲染，所以获取的初始状态是<code>null</code>，浏览器<code>loading</code>短暂延时后，控制台打印出<code>p</code>标签同时页面渲染出<code>hello world</code>。</p><p>以上情况很容易说明<code>JS</code>会阻塞<code>DOM</code>解析了</p><p><strong>优化手段：</strong></p><ol><li><code>&lt;head&gt;</code>标签内尽量不放置<code>&lt;script&gt;</code>标签，如果要放，尽量添加<code>defer</code>或<code>async</code>属性，它们不会阻塞渲染</li><li>尽量将<code>&lt;script&gt;</code>放在<code>&lt;body&gt;</code>末尾，<code>Render Tree</code>渲染完后再加载脚本</li><li>使用<code>ES6 module</code>按需加载</li></ol><p><strong>关于优化，还有更多的手段：</strong></p><ol><li>http/1.1 版本会限制最大并发数量 6，服务器可以上 http/2 协议，处理更大并发数量</li><li>使用骨灰屏</li><li>减少使用网络下载字体</li><li>给图片添加初始尺寸，避免发生回流</li><li>压缩图片：位图使用<code>webp</code>格式，矢量图使用<code>svg</code></li><li>压缩视频：使用<code>mp4</code>格式</li><li>视频替代<code>gif</code></li><li>多使用原生<code>api</code>新特性，通过<code>babel</code>等工具保证兼容性</li><li><code>JS</code>代码尽量分模块，按需加载</li><li>页面路由懒加载，进入哪个页面就加载哪个</li><li>使用<code>tree-shaking</code>摇掉不必要的引入</li><li>使用<code>ES module</code>，实现按需加载</li><li>代码压缩，让代码量尽量减少</li><li>重计算的工作，可以交给<code>web worker</code>多线程</li><li>不经常变的数据，可以利用用户的<code>storage</code>等存储在本地</li><li>。。。</li></ol><h3 id="回流和重绘" tabindex="-1">回流和重绘 <a class="header-anchor" href="#回流和重绘" aria-label="Permalink to &quot;回流和重绘&quot;">​</a></h3><p>在上面的章节中，我们介绍了浏览器是如何渲染的，浏览器采用流式布局模型，每个元素都是依次排开，呈现流式布局在渲染进程拿到了<code>DOM Tree</code>和<code>CSSOM Tree</code>之后，它会根据这两颗树去合成<code>Render Tree</code>，再根据<code>Render Tree</code>计算元素在设备视口内的位置和大小，得到计算好的节点样式和节点的坐标信息，交给<code>GPU</code>进行绘制，展示在浏览器屏幕上</p><p>回流和重绘指的是，当<code>Render Tree</code>构建合成好之后，如果这时元素的位置、尺寸等几何信息发生了变化，那么渲染进程会重新布局，重新计算元素位置，重新进行绘制，这个重新渲染部分或者全部文档的过程就叫做回流；可能触发回流的原因：</p><ol><li><code>DOM</code>元素结构发生改变</li><li>位置发生改变</li><li>大小发生改变</li><li>内容发生改变</li><li>浏览器可视区域发生改变</li><li>激活<code>CSS</code>伪类</li><li>全局属性<code>getComputedStyle</code>读取元素集合信息</li></ol><hr><p>而重绘就是，元素的样式改变，不影响元素的在文档流的几何信息，浏览器会将新样式赋予给这个元素，这个过程就叫做重绘可能引起重绘的原因：</p><ol><li>元素的样式发生改变：background、outline、color 等</li><li>元素的显式状态发生改变：visibility</li></ol><p><strong>总结：回流一定会重绘，而重绘不一定会回流，回流产生的性能代价比重绘要更高</strong></p><p>在开发中尽量避免回流和重绘： <code>CSS</code>：</p><ul><li>避免使用<code>&lt;table&gt;</code>布局</li><li>避免设置多层内联样式</li></ul><p><code>JS</code>：</p><ul><li><p>对元素的样式读写分离，浏览器的一种渲染机制：比如在读取样式时，发现你当前行是修改样式，浏览器就会缓一会，看下一行是否是修改样式的代码，如果是，就添加在这次中，再继续往后检索，直到遇到其他类型的代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> box </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//下面是修改操作</span></span>
<span class="line"><span style="color:#BABED8;">box</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">style</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">color </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">box</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">style</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">width </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">200px</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 假如在这会有读取操作，就会打断浏览器的读写机制</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// console.log(box.clientWidth)</span></span>
<span class="line"><span style="color:#BABED8;">box</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">style</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">height </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100px</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">box</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">style</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">margin </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10px</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 建议dom读写分离</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(box</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">clientWidth)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>集中修改样式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> box </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.box</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 避免上面的例子一行行修改样式</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// box.style.height = &quot;100px&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// box.style.margin = &quot;10px&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 而是操作CSS类</span></span>
<span class="line"><span style="color:#BABED8;">box</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">classList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.active</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>批量<code>DOM</code>生成，使用文档碎片</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> ulEl </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ul</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 逐行插入DOM结构的做法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// for(let i = 0; i &lt; 100000; i++){</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   let li = document.createElement(&quot;li&quot;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   ulEl.append(li)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用文档碎片批量插入</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> fragment </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createDocumentFragment</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">100000</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">li</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">fragment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">li</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">ulEl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#BABED8;">(fragment)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>避免使用<code>getComputedStyle</code>获取元素的几何信息</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> myDiv </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myDiv</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> computedStyle </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComputedStyle</span><span style="color:#BABED8;">(myDiv)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 尽量避免使用getComputedStyle读取几何信息</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(computedStyle</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">width)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>避免频繁操作<code>DOM</code>，建议使用前端<code>MVVC | MVC</code>框架实现</p></li></ul><h3 id="script-属性-defer-async" tabindex="-1">script 属性：defer | async <a class="header-anchor" href="#script-属性-defer-async" aria-label="Permalink to &quot;script 属性：defer | async&quot;">​</a></h3><p>在上面我们讲到，渲染进程在逐行解析代码时，遇到<code>&lt;link&gt;|&lt;script&gt;</code>标签，会开启新的线程去加载资源，当<code>JS</code>资源先加载完，渲染进程会暂停<code>DOM</code>的解析和构建，转而去解析、执行<code>JS</code>脚本，就会造成<code>JS</code>脚本会阻塞进程</p><p><img src="`+c+'" alt=""></p><p>从上面的图可以看到，<code>&lt;script&gt;</code>标签阻塞了<code>DOM Tree</code>的构建合成，如果<code>JS</code>脚本执行时间过长或网络延迟，都会导致用户白屏，看不到真正的页面内容</p><p>现在的<code>SPA</code>单页面应用，脚本的占比往往比<code>UI</code>页面内容本身还要大，意味着从服务器获取对应<code>JS</code>资源时，会造成阻塞页面的解析渲染</p><p>所以，<code>&lt;script&gt;</code>提供了两个属性：<code>defer|async</code></p><h4 id="defer" tabindex="-1">defer <a class="header-anchor" href="#defer" aria-label="Permalink to &quot;defer&quot;">​</a></h4><p>当浏览器遇到带有<code>defer</code>属性的<code>&lt;script&gt;</code>标签时，浏览器获取该脚本的方式变成异步的，因此加载这种脚本不会阻塞<code>DOM Tree</code>的构建，就算脚本资源加载完成了，也不会立即解析执行<code>JS</code>代码，而是会等待<code>HTML</code>解析完，再去解析执行<code>JS</code>代码</p><p><img src="'+t+`" alt="">存在多个<code>defer</code>属性的<code>&lt;script&gt;</code>标签时，浏览器会按照它们在定义时的顺序执行，不去破坏各个<code>JS</code>脚本之间的依赖关系</p><p><strong>运行顺序</strong></p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-rb1kH" id="tab-yhqGhNz" checked="checked"><label for="tab-yhqGhNz">index.html</label><input type="radio" name="group-rb1kH" id="tab-zMZ3E-w"><label for="tab-zMZ3E-w">test.js</label></div><div class="blocks"><div class="language-html active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X-UA-Compatible</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">IE=edge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Document</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./test.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">defer</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">      window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">onload ---</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOMContentLoaded ---</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default ---</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">defer ---</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><p>结果如下图</p><p><img src="`+r+'" alt=""></p><p>从结果可以总结出以下顺序，执行顺序按照快到慢排序：<code>default</code> &gt; <code>defer</code> &gt; <code>DOMContentLoaded</code> &gt; <code>onload</code> 说明<code>defer</code>属性的<code>&lt;script&gt;</code>标签，会在<code>DOM Tree</code>构建之后才会执行</p><p>因此，<code>defer</code>属性的标签，更加适合操作<code>DOM</code>的代码载体</p><h4 id="async" tabindex="-1">async <a class="header-anchor" href="#async" aria-label="Permalink to &quot;async&quot;">​</a></h4><p>当浏览器遇到带有<code>async</code>属性的<code>&lt;script&gt;</code>标签时，对于它的资源请求加载也是异步的，同样不会阻塞浏览器的解析渲染，但是它跟<code>defer</code>最大的不同点在于，<code>async</code>请求完后，如果此时的<code>HTML</code>还没解析完，那么浏览器就会暂停<code>HTML</code>的解析，转而执行<code>async</code>的脚本代码，执行完之后再接着解析</p><p><img src="'+i+'" alt=""></p><p>如果<code>HTML</code>在它之前先解析完成，那么程序按正常流程执行下去</p><p><img src="'+D+'" alt=""></p><p><code>async</code>的<code>&lt;script&gt;</code>的执行时间是不可控的，取决于网络的快慢，脚本的大小，正是因为这种不可控，如果在<code>async</code>脚本中操作<code>DOM</code>，有可能会获取不到，因为不确定<code>HTML</code>什么时候解析完成</p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ol><li><code>defer</code>不阻塞<code>DOM</code>的构建渲染，多个<code>defer</code>时按顺序执行</li><li><code>defer</code>在默认代码之后执行，在<code>onload</code>事件之前执行</li><li><code>defer</code>会在<code>DOM</code>解析完成后执行，需要操作<code>DOM</code>时，<code>defer</code>最合适</li><li><code>async</code>如果在<code>HTML</code>未解析完成之前资源回来，会先暂停<code>HTML</code>的解析，转而执行<code>JS</code>代码</li><li><code>async</code>一般用于不需要操作<code>DOM</code>的独立脚本</li></ol><h3 id="渲染层合并composite" tabindex="-1">渲染层合并<code>composite</code> <a class="header-anchor" href="#渲染层合并composite" aria-label="Permalink to &quot;渲染层合并`composite`&quot;">​</a></h3><p>正常来说，渲染进程并不是一下子将<code>Render Tree</code>渲染绘制到屏幕上，它还会对<code>Render Tree</code>进行分层，并且做分层处理。通常情况下，并不是<code>Render Tree</code>的每个节点都会形成一个图层，而是根据<code>Root</code>根节点去生成图层，在遇见特殊的样式属性时，就会创建新的图层，并在图层上处理绘制这些<code>DOM</code></p><p>常见创建图层的属性：</p><ul><li><code>Root</code>根元素</li><li><code>z-index</code>是负值的子元素</li><li>有<code>3D transform</code>转换的属性</li><li>开启了<code>position: fixed;</code>的元素</li><li>will-change 样式的值为 <code>opacity、transform、transform-style、perspective、filter、backdrop-filter</code> 这 6 个之一</li></ul><p><strong>优点：</strong></p><ol><li>合并图层会交由<code>GPU</code>处理，会比<code>CPU</code>要快，性能要好</li><li>当这些独立图层的元素需要重绘时，只需要重绘当前在的图层，不影响其他的层，减少重绘的性能损耗</li></ol>',95)]))}const g=n(d,[["render",y]]);export{A as __pageData,g as default};
